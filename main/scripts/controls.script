local game_manager = require("main.scripts.game_manager")

go.property("speed", 100)
go.property("footstep_cooldown", 0.3) -- O tempo em segundos entre cada som de passo

function init(self)
	msg.post(".", "acquire_input_focus")

	self.velocity = vmath.vector3(0, 0, 0)
	self.current_animation = hash("idle")

	-- Usaremos um timer para controlar o cooldown. Começa em 0 para tocar o primeiro passo imediatamente.
	self.footstep_timer = 0

	--[[
	Cria uma tabela para guardar todos os sons de passos.
	Isto assume que você tem 21 componentes de som neste Game Object
	com os IDs "player_step_1", "player_step_2", ..., "player_step_21".
	Se os nomes forem diferentes, ajuste a string abaixo.
	--]]
	self.footstep_sounds = {}
	for i = 1, 21 do
		table.insert(self.footstep_sounds, "/footstep#footstep_" .. i)
	end

	-- Inicia a animação do jogador
	sprite.play_flipbook("#player_sprite", self.current_animation)
end

function update(self, dt)	
	local position = go.get_position()
	position = position + self.velocity * self.speed * dt
	go.set_position(position)

	-- Gerencia a animação
	if self.velocity.x == 0 then
		play_animation(self, "idle")
	else
		play_animation(self, "running")
	end

	-- Diminui o timer do cooldown a cada frame
	if self.footstep_timer > 0 then
		self.footstep_timer = self.footstep_timer - dt
	end

	-- Se o jogador está se movendo e o cooldown terminou
	if self.velocity.x ~= 0 and self.footstep_timer <= 0 then
		play_footstep_sound(self)
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash('set_position') then
		set_position(self, message.new_position)
	end
end

function set_position(self, position)
	go.set_position(position)
end

-- Função para tocar um som de passo aleatório e reiniciar o timer
function play_footstep_sound(self)
	-- Escolhe um som aleatório da nossa tabela de sons
	local random_index = math.random(1, #self.footstep_sounds)
	local sound_to_play = self.footstep_sounds[random_index]

	-- Toca o som escolhido
	sound.play(sound_to_play, { gain = .1 })

	-- Reinicia o timer com o valor do cooldown
	self.footstep_timer = self.footstep_cooldown
end

function flip_sprite(orientation)
	if orientation == 'right' then
		sprite.set_hflip("#player_sprite", false)
	elseif orientation == 'left' then
		sprite.set_hflip("#player_sprite", true)
	end
end

function play_animation(self, animation_id)
	local new_animation_hash = hash(animation_id)
	if self.current_animation == new_animation_hash then
		return
	end

	sprite.play_flipbook("#player_sprite", new_animation_hash)
	self.current_animation = new_animation_hash
end

function on_input(self, action_id, action)	
	if action_id == hash("right") then
		if action.pressed then
			flip_sprite("right")
			self.velocity.x = 1
		elseif action.released and self.velocity.x > 0 then
			self.velocity.x = 0
		end

	elseif action_id == hash("left") then
		if action.pressed then
			flip_sprite("left")
			self.velocity.x = -1
		elseif action.released and self.velocity.x < 0 then
			self.velocity.x = 0
		end
	end
end
