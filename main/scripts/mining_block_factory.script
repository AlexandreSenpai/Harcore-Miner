go.property("block_size", 16)
go.property("grid_width", 5)
go.property("grid_height", 10)
go.property("grid_gap", 1)
go.property("anchor_point", vmath.vector3(224, 0, 0))

MINING_MAP = {}

BLOCK_MAP = {
	blue = {
		probability = 3,
		label = "BLUE",
		sprite = "block_blue"
	},
	green = {
		probability = 3,
		label = "GREEN",
		sprite = "block_green"
	},
	pink = {
		probability = 1,
		label = "PINK",
		sprite = "block_pink"
	},
	red = {
		probability = 3,
		label = "RED",
		sprite = "block_red"
	},
	white = {
		probability = 10,
		label = "WHITE",
		sprite = "block_white"
	},
	stone = {
		probability = 80,
		label = "STONE",
		sprite = "block_stone"
	}
}


function select_block_by_probability()
	local total_weight = 100
	local random_number = math.random() * total_weight

	local cumulative_weight = 0
	for block, definition in pairs(BLOCK_MAP) do
		cumulative_weight = cumulative_weight + definition["probability"]
		if random_number <= cumulative_weight then
			return definition
		end
	end
end

function calculate_margin(self, x, y)
	local x_margin = 0
	local y_margin = 0

	if x > 1 and x < self.grid_width + 1 then
		x_margin = self.grid_gap
	end

	if y > 1 and y < self.grid_height + 1 then
		y_margin = self.grid_gap
	end

	return x_margin, y_margin
end

function spawn_block(self, sprite, x, y)
	local x_margin, y_margin = calculate_margin(self, x, y)

	local x_pos = self.anchor_point.x + ((x - 1) * (self.block_size + x_margin))
	local y_pos = self.anchor_point.y + ((y - 1) * (self.block_size + y_margin))
	
	local block_id = factory.create("/mining_blocks#block_factory", vmath.vector3(x_pos, y_pos, 1))
	msg.post(block_id, "play_animation", { id = hash(sprite)})
	msg.post(block_id, "set_cord", { cord = vmath.vector3(x,y,0)})
end

function generate_map(self)
	for y=1, self.grid_height do
		MINING_MAP[y] = {}
		for x=1, self.grid_width do
			local selected_block = select_block_by_probability()
			-- MINING_MAP[y][x] = selected_block
			spawn_block(self, selected_block.sprite, x, y)
		end
	end
end

function init(self)
	generate_map(self)
end